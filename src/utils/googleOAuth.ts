
import { GoogleAuthResponse } from "@/types/auth";

export class GoogleOAuthClient {
  private client: any = null;
  private callback: (response: GoogleAuthResponse) => void;
  private isClientReady = false;

  constructor(callback: (response: GoogleAuthResponse) => void) {
    this.callback = callback;
    this.loadGoogleIdentityServices();
  }

  private loadGoogleIdentityServices() {
    console.log("üì¶ DEBUG - Chargement de Google Identity Services...");
    
    if (window.google?.accounts?.oauth2) {
      console.log("‚úÖ DEBUG - Google Identity Services d√©j√† disponible");
      this.initializeGoogleAuth();
      return;
    }

    if (document.getElementById("google-identity-script")) {
      console.log("üì¶ DEBUG - Script d√©j√† en cours de chargement...");
      return;
    }

    const script = document.createElement("script");
    script.id = "google-identity-script";
    script.src = "https://accounts.google.com/gsi/client";
    script.async = true;
    script.defer = true;
    
    script.onload = () => {
      console.log("‚úÖ DEBUG - Google Identity Services charg√© avec succ√®s");
      setTimeout(() => {
        this.initializeGoogleAuth();
      }, 100);
    };
    
    script.onerror = () => {
      console.error("‚ùå DEBUG - Erreur lors du chargement de Google Identity Services");
    };
    
    document.head.appendChild(script);
  }

  private initializeGoogleAuth() {
    console.log("üîê DEBUG - Initialisation de Google OAuth2...");
    
    if (typeof window !== 'undefined' && window.google?.accounts?.oauth2) {
      console.log("‚úÖ DEBUG - Google OAuth2 disponible, cr√©ation du client...");
      
      try {
        const clientConfig = {
          client_id: "380256615541-t5q64hmeiamv9ae6detja5oofnn315t6.apps.googleusercontent.com",
          scope: [
            "https://www.googleapis.com/auth/userinfo.email",
            "https://www.googleapis.com/auth/userinfo.profile", 
            "https://www.googleapis.com/auth/gmail.readonly",
            "https://www.googleapis.com/auth/gmail.modify"
          ].join(" "),
          callback: this.callback,
        };
        
        console.log("üîß DEBUG - Configuration du client OAuth:", {
          client_id: clientConfig.client_id,
          scope: clientConfig.scope,
          hasCallback: !!clientConfig.callback
        });
        
        this.client = window.google.accounts.oauth2.initTokenClient(clientConfig);
        this.isClientReady = true;
        
        console.log("‚úÖ DEBUG - Client Google OAuth2 initialis√© avec succ√®s");
        console.log("üîë DEBUG - Type du client:", typeof this.client);
        console.log("üîë DEBUG - Propri√©t√©s du client:", Object.getOwnPropertyNames(this.client));
        
        // D√©clencher un √©v√©nement pour notifier que le client est pr√™t
        window.dispatchEvent(new CustomEvent('googleClientReady'));
        
      } catch (error) {
        console.error("‚ùå DEBUG - Erreur lors de l'initialisation du client OAuth2:", error);
        this.isClientReady = false;
      }
    } else {
      console.error("‚ùå DEBUG - Google Identity Services non disponible apr√®s chargement");
      this.isClientReady = false;
    }
  }

  public requestAccessToken() {
    console.log("üöÄ DEBUG - D√©but du processus d'authentification Gmail...");
    console.log("üîç DEBUG - √âtat du client Google:", {
      hasClient: !!this.client,
      isReady: this.isClientReady,
      clientType: typeof this.client
    });
    
    if (!this.client || !this.isClientReady) {
      console.error("‚ùå DEBUG - Client Google non pr√™t");
      throw new Error("Client Google non initialis√© ou non pr√™t");
    }
    
    try {
      console.log("üîë DEBUG - Tentative d'appel de la m√©thode d'authentification...");
      
      // D'apr√®s les logs, la m√©thode s'appelle 'l' dans la version minifi√©e
      if (typeof this.client.l === 'function') {
        console.log("‚úÖ DEBUG - Utilisation de l() - version minifi√©e");
        this.client.l();
      } else if (typeof this.client.requestAccessToken === 'function') {
        console.log("‚úÖ DEBUG - Utilisation de requestAccessToken()");
        this.client.requestAccessToken();
      } else {
        console.log("üîç DEBUG - Recherche d'autres m√©thodes disponibles...");
        const methods = Object.getOwnPropertyNames(this.client).filter(prop => 
          typeof this.client[prop] === 'function'
        );
        console.log("üîç DEBUG - M√©thodes disponibles:", methods);
        
        // Essayer une autre m√©thode disponible
        if (methods.length > 0) {
          const method = methods[0]; // Prendre la premi√®re m√©thode disponible
          console.log(`‚úÖ DEBUG - Utilisation de ${method}()`);
          this.client[method]();
        } else {
          throw new Error("Aucune m√©thode d'authentification trouv√©e sur le client Google");
        }
      }
      
      console.log("üì± DEBUG - Popup d'authentification demand√© avec succ√®s");
    } catch (error) {
      console.error("‚ùå DEBUG - Erreur lors du d√©clenchement de l'auth:", error);
      throw error;
    }
  }

  public isReady(): boolean {
    return this.isClientReady && !!this.client;
  }
}
